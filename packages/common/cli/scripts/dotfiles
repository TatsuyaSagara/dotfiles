#!/bin/sh
 
# Exit on error
set -e 

GITHUB_PATH=~/projects/github.com
#GIT_CLONE_PATH="$GITHUB_PATH"
#STOW_PACKAGES_PATH="$GIT_CLONE_PATH"/dotfiles/packages
STOW_PACKAGES_PATH="$GITHUB_PATH"/dotfiles/packages

os_type="$(uname)"
arch_name="$(uname -m)"

###########################################################
# Options
###########################################################
unlink_packages=
verbose=
for i in "$@"; do
    case "$i" in
        -s|--skip-apps)
            skip_apps=1
            shift ;;
        -v|--verbose)
            verbose=1
            shift ;;
        -g|--skip-git-setting)
            skip_git=1
            shift ;;
        -u=*|--unlink=*)
            unlink_packages="${i#*=}"
            shift ;;
        *) ;;
    esac
done

###########################################################
# Utils
###########################################################
log() {
    message=$1
    echo "$message"
}

log_warning() {
    message=$1
    echo "$message"
}

is_file() {
    path="$1"
    [ -f "$path" ]
}

is_dir() {
    path="$1"
    [ -d "$path" ]
}

ensure_dir() {
    path="$1"
    if ! is_dir "$path"; then
        mkdir -p "$path"
    fi
}

log "Start dotfiles => ${os_type}/${arch_name}"

###########################################################
# Check operating system or distribution
###########################################################
if [ "${os_type}" != "Darwin" ]; then
    if [ "${os_type}" != "Linux" ] || ! is_file /etc/arch-release; then
        log 'Supported is macOS or Arch Linux only...'
        exit 1
    fi
fi
log 'Check for supported OS ...OK'

###########################################################
# Stow unlink
###########################################################
if [ -n "$unlink_packages" ]; then
    log 'Unlinking dotfiles...'
    stow -vD -d "$STOW_PACKAGES_PATH" -t ~ "$unlink_packages"
    exit
fi

###########################################################
# Install Homebrew
###########################################################
if [ "${os_type}" = "Darwin" ]; then
    # macOS
    if [ "${arch_name}" = "x86_64" ]; then
        # Intel
        if ! is_file /usr/local/bin/brew; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            log '=====> Install Homebrew SUCCESS'
        fi
    elif [ "${arch_name}" = "arm64" ]; then
        # ARM
        if ! is_file /opt/homebrew/bin/brew; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            log 'Install Rosetta 2'
            sudo softwareupdate --install-rosetta
        fi
        eval "$(/opt/homebrew/bin/brew shellenv)"
        log '=====> Install Homebrew SUCCESS'
    fi
elif [ "${os_type}" = "Linux" ]; then
    # Linux
    if ! is_file /home/linuxbrew/.linuxbrew/bin/brew; then
        if ! is_file /usr/bin/git; then
            sudo pacman -S --noconfirm git
        fi
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> "$HOME"/.bash_profile
    fi
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    log '=====> Install Homebrew SUCCESS'
fi

###########################################################
# Install AUR Helper
###########################################################
if [ "${os_type}" = "Linux" ]; then
    (sudo pacman --noconfirm -Syu)
    if ! is_file /usr/bin/paru; then
        (
            if ! is_file /usr/bin/git; then
                sudo pacman -S --noconfirm git
            fi
        )
        git clone https://aur.archlinux.org/paru.git ~/.srcs/paru
        (cd ~/.srcs/paru && makepkg -si --noconfirm )
        log '=====> Install AUR Helper SUCCESS'
    fi
fi

###########################################################
# Clone dotfiles
###########################################################
ensure_dir "$GITHUB_PATH"

if ! is_dir "$GITHUB_PATH"/dotfiles; then
    cd "$GITHUB_PATH"
    git clone https://github.com/TatsuyaSagara/dotfiles.git
#    git clone git@github.com:TatsuyaSagara/dotfiles.git
    log '=====> Clone dotfiles SUCCESS'
fi

###########################################################
# Install Apps and CLIs
###########################################################
if [ ! "$skip_apps" ]; then
    brew bundle --file "$GITHUB_PATH"/dotfiles/Brewfile $([ -n "$verbose" ] && echo -v)
    if [ "${os_type}" = "Darwin" ]; then
        # macOS
        brew bundle --file "$GITHUB_PATH"/dotfiles/Brewfile_mac $([ -n "$verbose" ] && echo -v)
    elif [ "${os_type}" = "Linux" ]; then
        # Linux
        sudo pacman -S --needed --noconfirm - < "$GITHUB_PATH"/dotfiles/pkglist.txt
        paru -S --needed --noconfirm - < "$GITHUB_PATH"/dotfiles/pkglist_aur.txt
        fc-cache -fv
    fi
    log '=====> Install Apps and CLIs SUCCESS'
fi

###########################################################
# Setup Stow link
###########################################################
ensure_dir ~/.config/alacritty
ensure_dir ~/.config/starship
ensure_dir ~/.config/yarn/global

mkdir -p $HOME/scripts
stow -vd "$STOW_PACKAGES_PATH"/common -t ~ $(ls $STOW_PACKAGES_PATH/common)
if [ "${os_type}" = "Darwin" ]; then
    stow -vd "$STOW_PACKAGES_PATH"/mac -t ~ $(ls $STOW_PACKAGES_PATH/mac)
    log '=====> Setup Stow link SUCCESS'
elif [ "${os_type}" = "Linux" ]; then
    stow -vd "$STOW_PACKAGES_PATH"/linux -t ~ $(ls $STOW_PACKAGES_PATH/linux)
    log '=====> Setup Stow link SUCCESS'
fi

###########################################################
# Configure macOS setting
###########################################################

if [ "${os_type}" = "Darwin" ]; then
    ~/scripts/macos-defaults
fi

###########################################################
# Setup Neovim
###########################################################
plug_path=~/.local/share/nvim/site/autoload/plug.vim
if ! is_file "$plug_path"; then
    sh -c "curl -fLo $plug_path --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
fi

plugged_path=~/.local/share/nvim/autoload/plugged
if ! is_dir "$plugged_path"; then
    if [ "${os_type}" = "Darwin" ]; then
        nvim +PlugInstall +qall
    elif [ "${os_type}" = "Linux" ]; then
        nvim --headless +PlugInstall +qall
    fi
    log '=====> Setup Neovim SUCCESS'
fi

###########################################################
# Setup Git
###########################################################
if [ ! "$skip_git" ]; then
    # Setup Git
    if ! is_dir ~/.gnupg || [ -z "$(gpg --list-secret-keys --keyid-format LONG)" ]; then
        log 'Install gpg signing with git'
        gpg --default-new-key-algo rsa4096 --gen-key
        if [ "${os_type}" = "Darwin" ]; then
            key_id=$(gpg --list-secret-keys --keyid-format LONG | ggrep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/"  -f2)
        elif [ "${os_type}" = "Linux" ]; then
            key_id=$(gpg --list-secret-keys --keyid-format LONG | grep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/"  -f2)
        fi
        log 'Copy and pates the GPG key below to GitHub'
        gpg --armor --export "$key_id"
        git config --global user.signingkey "$key_id"
    fi

    if ! is_file ~/.ssh/id_rsa.pub; then
        log 'Setup gpg signing for git'
        ssh-keygen -t rsa -b 4096 -C "tatsuya.sagara@gmail.com"
        log 'Copy and pates the SSH key below to GitHub'
        cat ~/.ssh/id_rsa.pub
    fi
    log '=====> Setup Git SUCCESS'
fi

###########################################################
# asdf
###########################################################
for plugin in $(awk '{print $1}' ~/.tool-versions); do
    if ! is_dir ~/.asdf/plugins/"$plugin"; then
        asdf plugin add "$plugin"
    fi
done

is_runtime_versions_changed () {
    plugin="$1"
    specified=$(grep "$plugin" ~/.tool-versions | awk '{$1=""; print $0}')
    installed=$(asdf list "$plugin" 2>&1)

    is_changed=
    for version in $specified; do
        match=$(echo "$installed" | grep "$version")
        [ -z "$match" ] && is_changed=1
    done

    [ "$is_changed" ]
}

for plugin in $(asdf plugin list); do
    if is_runtime_versions_changed "$plugin"; then
        asdf install "$plugin"
    fi
done

. $(brew --prefix asdf)/libexec/asdf.sh
log '=====> Setup asdf SUCCESS'

###########################################################
# Setup Yarn global
###########################################################
if ! is_dir ~/.config/yarn/global/node_modules; then
    yarn global add
    log '=====> Setup Yarn global SUCCESS'
fi

###########################################################
# Alacritty
###########################################################
if [ "${os_type}" = "Linux" ]; then
    if ! is_file /usr/bin/alacritty; then
        ensure_dir "$GITHUB_PATH/alacritty"
        # Clone
        (
            cd "$GITHUB_PATH"
            git clone https://github.com/alacritty/alacritty.git
        )
        # Build
        (
            cd "$ALACRITTY_ORG_PATH"
            cargo build --release
            sudo cp -p target/release/alacritty /usr/bin
        )
        log '=====> Setup Alacritty SUCCESS'
    fi
fi

###########################################################
# Change shell
###########################################################
#if [ "${os_type}" = "Linux" ]; then
#    log 'Change shell to zsh.'
#    chsh -s $(which zsh)
#fi
